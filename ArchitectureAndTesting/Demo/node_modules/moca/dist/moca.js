"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
class Test {
    constructor(description, promise) {
        this.description = description;
        this.promise = promise;
        this.error = null;
    }
}
class Suite {
    constructor(description) {
        this.description = description;
        this.tests = [];
    }
    setup(promise) {
        this.setupPromise = promise;
    }
    teardown(promise) {
        this.teardownPromise = promise;
    }
    add(test) {
        this.tests.push(test);
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(colors.bold(colors.blue('\n[Suite]')), this.description);
            for (var t of this.tests) {
                if (this.setupPromise) {
                    yield this.setupPromise();
                }
                try {
                    yield t.promise();
                    if (this.teardownPromise) {
                        yield this.teardownPromise();
                    }
                    console.log(colors.bold(colors.green('  [OK]')), t.description);
                }
                catch (e) {
                    t.error = e;
                    if (this.teardownPromise) {
                        yield this.teardownPromise();
                    }
                    console.log(colors.bold(colors.red('  [FAILED 0]')), t.description);
                }
            }
        });
    }
    echoError() {
        for (var t of this.tests) {
            if (t.error && t.error.stack) {
                var lines = t.error.stack.split('\n');
                console.log(colors.bold(colors.blue('\n' + this.description + ' * ')) +
                    colors.bold(colors.red(t.description + ' \'' + lines[0])));
                lines.shift();
                for (var line of lines) {
                    console.log(line);
                }
            }
        }
    }
}
class Tester {
    constructor() {
        this.suites = [];
        this.index = 0;
        this.running = false;
        this.runningIndex = 0;
        process.on('exit', () => {
            for (var s of this.suites) {
                s.echoError();
            }
        });
    }
    getSuite() {
        var s = this.suites[this.index];
        return s ? s : null;
    }
    suite(description, cb) {
        this.suites.push(new Suite(description));
        cb();
        ++this.index;
        if (!this.running) {
            this.run();
        }
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            this.running = true;
            var s = this.suites[this.runningIndex];
            while (s) {
                yield s.run();
                ++this.runningIndex;
                s = this.suites[this.runningIndex];
            }
            this.running = false;
        });
    }
    test(description, promise) {
        this.suites[this.index].add(new Test(description, promise));
    }
}
var gTester = null;
function getGTester() {
    if (gTester === null) {
        gTester = new Tester();
    }
    return gTester;
}
function suite(description, cb) {
    getGTester().suite(description, cb);
}
exports.suite = suite;
function test(description, promise) {
    getGTester().test(description, promise);
}
exports.test = test;
function setup(promise) {
    var s = getGTester().getSuite();
    if (s) {
        s.setup(promise);
    }
}
exports.setup = setup;
function teardown(promise) {
    var s = getGTester().getSuite();
    if (s) {
        s.teardown(promise);
    }
}
exports.teardown = teardown;

//# sourceMappingURL=moca.js.map
