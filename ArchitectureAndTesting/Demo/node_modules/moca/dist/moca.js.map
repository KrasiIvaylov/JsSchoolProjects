{"version":3,"sources":["moca.ts"],"names":[],"mappings":"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","file":"moca.js","sourcesContent":["import * as colors from 'colors'\n\nclass Test {\n  public description: string\n  public promise: () => Promise<void>\n  public error: Error\n\n  constructor(description: string, promise: () => Promise<void>) {\n    this.description = description\n    this.promise = promise\n    this.error = null\n  }\n}\n\nclass Suite {\n  public description: string\n  private tests: Array<Test>\n  private setupPromise: () => Promise<void> \n  private teardownPromise: () => Promise<void> \n\n  constructor(description: string) {\n    this.description = description\n    this.tests = []\n  }\n\n  public setup(promise: () => Promise<void>) {\n    this.setupPromise = promise\n  }\n\n  public teardown(promise: () => Promise<void>) {\n    this.teardownPromise = promise\n  }\n\n  public add(test: Test) {\n    this.tests.push(test)\n  }\n\n  public async run() {\n    console.log(colors.bold(colors.blue('\\n[Suite]')), this.description)\n    for (var t of this.tests) {\n      if (this.setupPromise) {\n        await this.setupPromise()\n      }\n      try {\n        await t.promise()\n        if (this.teardownPromise) {\n          await this.teardownPromise()\n        }\n        console.log(colors.bold(colors.green('  [OK]')), t.description)\n      } catch (e) {\n        t.error = e\n        if (this.teardownPromise) {\n          await this.teardownPromise()\n        }\n        console.log(colors.bold(colors.red('  [FAILED 0]')), t.description)\n      }\n    }\n  }\n\n  public echoError() {\n    for (var t of this.tests) {\n      if (t.error && t.error.stack) {\n        var lines: Array<string> = t.error.stack.split('\\n')\n        console.log(colors.bold(colors.blue('\\n' + this.description + ' * ')) + \n                    colors.bold(colors.red(t.description + ' \\'' + lines[0]))) \n        lines.shift()\n        for (var line of lines) {\n          console.log(line)\n        }\n      }\n    }\n  }\n}\n\nclass Tester {\n  private suites: Array<Suite>\n  private index: number\n  private running: boolean\n  private runningIndex: number\n\n  constructor() {\n    this.suites = []\n    this.index = 0\n    this.running = false\n    this.runningIndex = 0\n    process.on('exit', () => {\n      for (var s of this.suites) {\n        s.echoError()\n      }\n    })\n  }\n\n  public getSuite(): Suite {\n    var s = this.suites[this.index]\n    return s ? s : null \n  }\n\n  public suite(description: string, cb: () => void) {\n    this.suites.push(new Suite(description))\n    cb()\n    ++this.index\n    if (!this.running) {\n      this.run()\n    }\n  }\n\n  private async run() {\n    this.running = true\n    var s = this.suites[this.runningIndex]\n    while (s) {\n      await s.run()\n      ++this.runningIndex\n      s = this.suites[this.runningIndex]\n    }\n    this.running = false\n  }\n\n  public test(description: string, promise: () => Promise<void>) {\n    this.suites[this.index].add(new Test(description, promise))\n  }\n}\n\nvar gTester: Tester = null\nfunction getGTester(): Tester {\n  if (gTester === null) {\n    gTester = new Tester()\n  }\n  return gTester\n}\n\nexport function suite(description: string, cb: () => void) {\n  getGTester().suite(description, cb)\n}\n\nexport function test(description: string, promise: () => Promise<void>) {\n  getGTester().test(description, promise)\n}\n\nexport function setup(promise: () => Promise<void>) {\n  var s = getGTester().getSuite()\n  if (s) {\n    s.setup(promise)\n  }\n}\n\nexport function teardown(promise: () => Promise<void>) {\n  var s = getGTester().getSuite()\n  if (s) {\n    s.teardown(promise)\n  }\n}"]}