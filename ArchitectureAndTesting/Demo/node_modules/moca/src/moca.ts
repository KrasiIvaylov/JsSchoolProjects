import * as colors from 'colors'

class Test {
  public description: string
  public promise: () => Promise<void>
  public error: Error

  constructor(description: string, promise: () => Promise<void>) {
    this.description = description
    this.promise = promise
    this.error = null
  }
}

class Suite {
  public description: string
  private tests: Array<Test>
  private setupPromise: () => Promise<void> 
  private teardownPromise: () => Promise<void> 

  constructor(description: string) {
    this.description = description
    this.tests = []
  }

  public setup(promise: () => Promise<void>) {
    this.setupPromise = promise
  }

  public teardown(promise: () => Promise<void>) {
    this.teardownPromise = promise
  }

  public add(test: Test) {
    this.tests.push(test)
  }

  public async run() {
    console.log(colors.bold(colors.blue('\n[Suite]')), this.description)
    for (var t of this.tests) {
      if (this.setupPromise) {
        await this.setupPromise()
      }
      try {
        await t.promise()
        if (this.teardownPromise) {
          await this.teardownPromise()
        }
        console.log(colors.bold(colors.green('  [OK]')), t.description)
      } catch (e) {
        t.error = e
        if (this.teardownPromise) {
          await this.teardownPromise()
        }
        console.log(colors.bold(colors.red('  [FAILED 0]')), t.description)
      }
    }
  }

  public echoError() {
    for (var t of this.tests) {
      if (t.error && t.error.stack) {
        var lines: Array<string> = t.error.stack.split('\n')
        console.log(colors.bold(colors.blue('\n' + this.description + ' * ')) + 
                    colors.bold(colors.red(t.description + ' \'' + lines[0]))) 
        lines.shift()
        for (var line of lines) {
          console.log(line)
        }
      }
    }
  }
}

class Tester {
  private suites: Array<Suite>
  private index: number
  private running: boolean
  private runningIndex: number

  constructor() {
    this.suites = []
    this.index = 0
    this.running = false
    this.runningIndex = 0
    process.on('exit', () => {
      for (var s of this.suites) {
        s.echoError()
      }
    })
  }

  public getSuite(): Suite {
    var s = this.suites[this.index]
    return s ? s : null 
  }

  public suite(description: string, cb: () => void) {
    this.suites.push(new Suite(description))
    cb()
    ++this.index
    if (!this.running) {
      this.run()
    }
  }

  private async run() {
    this.running = true
    var s = this.suites[this.runningIndex]
    while (s) {
      await s.run()
      ++this.runningIndex
      s = this.suites[this.runningIndex]
    }
    this.running = false
  }

  public test(description: string, promise: () => Promise<void>) {
    this.suites[this.index].add(new Test(description, promise))
  }
}

var gTester: Tester = null
function getGTester(): Tester {
  if (gTester === null) {
    gTester = new Tester()
  }
  return gTester
}

export function suite(description: string, cb: () => void) {
  getGTester().suite(description, cb)
}

export function test(description: string, promise: () => Promise<void>) {
  getGTester().test(description, promise)
}

export function setup(promise: () => Promise<void>) {
  var s = getGTester().getSuite()
  if (s) {
    s.setup(promise)
  }
}

export function teardown(promise: () => Promise<void>) {
  var s = getGTester().getSuite()
  if (s) {
    s.teardown(promise)
  }
}